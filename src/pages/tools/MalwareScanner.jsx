"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Switch } from "@/components/ui/switch"
import { Label } from "@/components/ui/label"
import Badge from "@/components/ui/badge"
import { Scan, Shield, Clock, AlertTriangle, CheckCircle, Info, FileWarning, WormIcon as Virus } from "lucide-react"

export default function MalwareScanner() {
  const [scanning, setScanning] = useState(false)
  const [scanComplete, setScanComplete] = useState(false)
  const [scanProgress, setScanProgress] = useState(0)
  const [scanType, setScanType] = useState("quick")
  const [scanResults, setScanResults] = useState(null)
  const [scheduledScan, setScheduledScan] = useState("weekly")
  const [autoClean, setAutoClean] = useState(true)

  // Mock scan function
  const startScan = () => {
    setScanning(true)
    setScanComplete(false)
    setScanProgress(0)

    const duration = scanType === "quick" ? 100 : scanType === "full" ? 300 : 200
    const interval = setInterval(() => {
      setScanProgress((prev) => {
        if (prev >= 100) {
          clearInterval(interval)
          setScanning(false)
          setScanComplete(true)
          generateResults()
          return 100
        }
        return prev + 1
      })
    }, duration)
  }

  const generateResults = () => {
    // Generate mock scan results
    const threatCount = Math.floor(Math.random() * 5)
    const threats = []

    const threatTypes = ["Trojan", "Adware", "Spyware", "Ransomware", "Worm", "Rootkit"]
    const locations = [
      "C:\\Windows\\Temp\\suspicious.exe",
      "C:\\Users\\AppData\\Local\\Temp\\download.exe",
      "C:\\Program Files\\Unknown\\service.exe",
      "C:\\Users\\Downloads\\cracked-software.exe",
      "C:\\Windows\\System32\\modified-library.dll",
    ]
    const risks = ["high", "medium", "low"]

    for (let i = 0; i < threatCount; i++) {
      threats.push({
        id: i + 1,
        name: `${threatTypes[Math.floor(Math.random() * threatTypes.length)]}.Gen.${Math.floor(Math.random() * 1000)}`,
        location: locations[Math.floor(Math.random() * locations.length)],
        risk: risks[Math.floor(Math.random() * risks.length)],
        quarantined: false,
      })
    }

    setScanResults({
      scanType,
      scanTime: scanType === "quick" ? "00:01:40" : scanType === "full" ? "00:05:00" : "00:03:20",
      itemsScanned: scanType === "quick" ? 5842 : scanType === "full" ? 145327 : 38921,
      threatsFound: threats.length,
      threats,
      lastScan: new Date().toLocaleString(),
    })
  }

  const handleQuarantine = (id) => {
    setScanResults({
      ...scanResults,
      threats: scanResults.threats.map((threat) => (threat.id === id ? { ...threat, quarantined: true } : threat)),
    })
  }

  const getRiskColor = (risk) => {
    switch (risk) {
      case "high":
        return "bg-red-500"
      case "medium":
        return "bg-yellow-500"
      case "low":
        return "bg-blue-500"
      default:
        return "bg-gray-500"
    }
  }

  return (
    <div className="grid gap-6 md:grid-cols-2">
      <Card>
        <CardHeader>
          <CardTitle>Malware Scanner</CardTitle>
          <CardDescription>Scan your system for viruses, trojans, and other malware</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label>Scan Type</Label>
            <Select value={scanType} onValueChange={setScanType} disabled={scanning}>
              <SelectTrigger>
                <SelectValue placeholder="Select scan type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="quick">
                  <div className="flex flex-col">
                    <span>Quick Scan</span>
                    <span className="text-xs text-muted-foreground">Checks common infection locations (~2 min)</span>
                  </div>
                </SelectItem>
                <SelectItem value="full">
                  <div className="flex flex-col">
                    <span>Full System Scan</span>
                    <span className="text-xs text-muted-foreground">Scans all files and directories (~30 min)</span>
                  </div>
                </SelectItem>
                <SelectItem value="custom">
                  <div className="flex flex-col">
                    <span>Custom Scan</span>
                    <span className="text-xs text-muted-foreground">Scan specific locations (~5-15 min)</span>
                  </div>
                </SelectItem>
              </SelectContent>
            </Select>
          </div>

          {scanning && (
            <div className="space-y-2 mt-4">
              <div className="flex justify-between text-sm">
                <span>Scanning...</span>
                <span>{scanProgress}%</span>
              </div>
              <Progress value={scanProgress} className="h-2" />
              <p className="text-xs text-muted-foreground">
                {scanType === "quick"
                  ? "Scanning common infection locations..."
                  : scanType === "full"
                    ? "Performing deep system scan..."
                    : "Scanning selected locations..."}
              </p>
            </div>
          )}

          <Button onClick={startScan} disabled={scanning} className="w-full">
            {scanning ? (
              <>
                <Scan className="mr-2 h-4 w-4 animate-pulse" />
                Scanning...
              </>
            ) : (
              <>
                <Scan className="mr-2 h-4 w-4" />
                Start Scan
              </>
            )}
          </Button>

          {scanComplete && scanResults && (
            <Alert
              className={scanResults.threatsFound > 0 ? "bg-red-50 border-red-200" : "bg-green-50 border-green-200"}
            >
              {scanResults.threatsFound > 0 ? (
                <AlertTriangle className="h-4 w-4 text-red-500" />
              ) : (
                <CheckCircle className="h-4 w-4 text-green-500" />
              )}
              <AlertDescription className={scanResults.threatsFound > 0 ? "text-red-800" : "text-green-800"}>
                {scanResults.threatsFound > 0
                  ? `Scan complete. ${scanResults.threatsFound} threat${scanResults.threatsFound > 1 ? "s" : ""} found!`
                  : "Scan complete. No threats found!"}
              </AlertDescription>
            </Alert>
          )}
        </CardContent>
        <CardFooter>
          <div className="w-full space-y-4">
            <div className="grid grid-cols-3 gap-2 text-center">
              <div className="border rounded-lg p-2">
                <p className="text-xs text-muted-foreground">Last Scan</p>
                <p className="font-medium">{scanResults ? scanResults.lastScan : "Never"}</p>
              </div>
              <div className="border rounded-lg p-2">
                <p className="text-xs text-muted-foreground">Threats Found</p>
                <p className="font-medium">{scanResults ? scanResults.threatsFound : "0"}</p>
              </div>
              <div className="border rounded-lg p-2">
                <p className="text-xs text-muted-foreground">Protection</p>
                <p className="font-medium text-green-500">Active</p>
              </div>
            </div>

            <Alert>
              <Shield className="h-4 w-4" />
              <AlertDescription>
                Regular scans help keep your system protected from malware and other threats.
              </AlertDescription>
            </Alert>
          </div>
        </CardFooter>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Scan Results & Settings</CardTitle>
          <CardDescription>
            {scanComplete ? `Results from ${scanType} scan` : "Configure scanner settings and view previous results"}
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Tabs defaultValue="results">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="results">Results</TabsTrigger>
              <TabsTrigger value="settings">Settings</TabsTrigger>
            </TabsList>

            <TabsContent value="results" className="space-y-4 pt-4">
              {!scanComplete ? (
                <div className="flex flex-col items-center justify-center h-40 text-center text-muted-foreground">
                  <Scan className="h-10 w-10 mb-2 opacity-50" />
                  <p>No recent scan results</p>
                  <p className="text-sm">Run a scan to check for threats</p>
                </div>
              ) : scanResults.threatsFound === 0 ? (
                <div className="flex flex-col items-center justify-center h-40 text-center">
                  <div className="rounded-full bg-green-100 p-3 mb-4">
                    <CheckCircle className="h-6 w-6 text-green-500" />
                  </div>
                  <p className="font-medium text-green-600">System Clean!</p>
                  <p className="text-sm text-muted-foreground mt-1">No threats were found during the {scanType} scan</p>
                  <div className="mt-4 text-sm">
                    <p>Items scanned: {scanResults.itemsScanned.toLocaleString()}</p>
                    <p>Scan time: {scanResults.scanTime}</p>
                  </div>
                </div>
              ) : (
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="font-medium">Threats Found</h3>
                      <p className="text-sm text-muted-foreground">
                        {scanResults.itemsScanned.toLocaleString()} items scanned in {scanResults.scanTime}
                      </p>
                    </div>
                    <Badge variant="destructive">{scanResults.threatsFound}</Badge>
                  </div>

                  <div className="space-y-3">
                    {scanResults.threats.map((threat) => (
                      <div key={threat.id} className="border rounded-lg p-3">
                        <div className="flex justify-between items-start">
                          <div>
                            <div className="flex items-center">
                              <Virus className="h-4 w-4 text-red-500 mr-2" />
                              <h3 className="font-medium">{threat.name}</h3>
                              <Badge className={`ml-2 ${getRiskColor(threat.risk)}`}>{threat.risk}</Badge>
                            </div>
                            <p className="text-xs text-muted-foreground mt-1">Location: {threat.location}</p>
                          </div>
                          <Button
                            variant={threat.quarantined ? "outline" : "destructive"}
                            size="sm"
                            disabled={threat.quarantined}
                            onClick={() => handleQuarantine(threat.id)}
                          >
                            {threat.quarantined ? "Quarantined" : "Quarantine"}
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </TabsContent>

            <TabsContent value="settings" className="space-y-4 pt-4">
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="scheduled-scan">Scheduled Scans</Label>
                  <Select value={scheduledScan} onValueChange={setScheduledScan}>
                    <SelectTrigger id="scheduled-scan">
                      <SelectValue placeholder="Select frequency" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="daily">Daily</SelectItem>
                      <SelectItem value="weekly">Weekly</SelectItem>
                      <SelectItem value="monthly">Monthly</SelectItem>
                      <SelectItem value="never">Never</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label htmlFor="auto-clean">Automatic Cleaning</Label>
                    <p className="text-xs text-muted-foreground">Automatically quarantine detected threats</p>
                  </div>
                  <Switch id="auto-clean" checked={autoClean} onCheckedChange={setAutoClean} />
                </div>

                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label htmlFor="real-time">Real-time Protection</Label>
                    <p className="text-xs text-muted-foreground">Monitor system for threats in real-time</p>
                  </div>
                  <Switch id="real-time" defaultChecked />
                </div>

                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label htmlFor="cloud-check">Cloud-based Detection</Label>
                    <p className="text-xs text-muted-foreground">Use cloud database for improved detection</p>
                  </div>
                  <Switch id="cloud-check" defaultChecked />
                </div>

                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label htmlFor="archive-scan">Scan Archives</Label>
                    <p className="text-xs text-muted-foreground">Scan inside ZIP, RAR and other archives</p>
                  </div>
                  <Switch id="archive-scan" defaultChecked />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="exclusions">Exclusions</Label>
                  <div className="border rounded-lg p-2 text-sm">
                    <p className="text-muted-foreground">No exclusions configured</p>
                  </div>
                  <p className="text-xs text-muted-foreground">
                    Add files, folders, or processes to exclude from scanning
                  </p>
                </div>
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
        <CardFooter className="flex flex-col items-start">
          <div className="grid grid-cols-2 gap-4 w-full mb-4">
            <div className="border rounded-lg p-3 flex items-center">
              <Clock className="h-5 w-5 mr-3 text-blue-500" />
              <div>
                <h3 className="text-sm font-medium">Next Scheduled Scan</h3>
                <p className="text-xs text-muted-foreground">
                  {scheduledScan === "never" ? "Not scheduled" : "Tomorrow, 2:00 AM"}
                </p>
              </div>
            </div>

            <div className="border rounded-lg p-3 flex items-center">
              <FileWarning className="h-5 w-5 mr-3 text-yellow-500" />
              <div>
                <h3 className="text-sm font-medium">Quarantine</h3>
                <p className="text-xs text-muted-foreground">
                  {scanResults && scanResults.threats ? scanResults.threats.filter((t) => t.quarantined).length : 0}{" "}
                  items
                </p>
              </div>
            </div>
          </div>

          <Alert>
            <Info className="h-4 w-4" />
            <AlertDescription>
              Keep your malware definitions up to date for the best protection against new threats.
            </AlertDescription>
          </Alert>
        </CardFooter>
      </Card>
    </div>
  )
}
