"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "../../components/ui/Card"
import { Input } from "../../components/ui/input"
import { Button } from "../../components/ui/button"
import { Alert } from "../../components/ui/alert"
import { Progress } from "../../components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "../../components/ui/tabs"
import { Badge } from "../../components/ui/badge"
import { Search, Shield, AlertTriangle, CheckCircle, Clock } from "lucide-react"
import { motion } from "framer-motion"

export default function VulnerabilityAssessment() {
  const [target, setTarget] = useState("")
  const [scanning, setScanning] = useState(false)
  const [scanned, setScanned] = useState(false)
  const [scanResults, setScanResults] = useState(null)

  const vulnerabilities = [
    {
      title: "Critical Vulnerabilities",
      count: 3,
      icon: AlertTriangle,
      color: "text-red-400",
    },
    {
      title: "High Risk",
      count: 7,
      icon: AlertTriangle,
      color: "text-orange-400",
    },
    {
      title: "Medium Risk",
      count: 12,
      icon: AlertTriangle,
      color: "text-yellow-400",
    },
    {
      title: "Low Risk",
      count: 5,
      icon: AlertTriangle,
      color: "text-blue-400",
    },
  ]

  // Mock vulnerability scan function
  const scanForVulnerabilities = (target) => {
    // Simulate API call
    return new Promise((resolve) => {
      setTimeout(() => {
        // Mock scan results
        const mockResults = {
          summary: {
            totalVulnerabilities: Math.floor(Math.random() * 10),
            criticalCount: Math.floor(Math.random() * 3),
            highCount: Math.floor(Math.random() * 4),
            mediumCount: Math.floor(Math.random() * 5),
            lowCount: Math.floor(Math.random() * 6),
            scanTime: Math.floor(Math.random() * 120) + 30,
            score: Math.floor(Math.random() * 100),
          },
          vulnerabilities: [
            {
              id: "CVE-2021-44228",
              name: "Log4j Remote Code Execution",
              description: "A critical vulnerability in the Log4j library that allows remote code execution",
              severity: "critical",
              cvss: 10.0,
              affected: Math.random() > 0.5,
              remediation: "Update Log4j to version 2.15.0 or later",
            },
            {
              id: "CVE-2021-34527",
              name: "PrintNightmare",
              description: "Windows Print Spooler Remote Code Execution Vulnerability",
              severity: "critical",
              cvss: 8.8,
              affected: Math.random() > 0.5,
              remediation: "Install the latest Windows security updates",
            },
            {
              id: "CVE-2021-26855",
              name: "Microsoft Exchange Server Vulnerability",
              description: "Server-side request forgery vulnerability in Exchange Server",
              severity: "high",
              cvss: 8.5,
              affected: Math.random() > 0.6,
              remediation: "Install the latest Exchange security updates",
            },
            {
              id: "CVE-2020-0601",
              name: "Windows CryptoAPI Spoofing Vulnerability",
              description: "A vulnerability in the Windows CryptoAPI that could allow certificate spoofing",
              severity: "high",
              cvss: 7.5,
              affected: Math.random() > 0.7,
              remediation: "Install the latest Windows security updates",
            },
            {
              id: "CVE-2019-19781",
              name: "Citrix ADC Directory Traversal",
              description: "A directory traversal vulnerability in Citrix ADC and Gateway",
              severity: "medium",
              cvss: 6.5,
              affected: Math.random() > 0.5,
              remediation: "Update Citrix ADC and Gateway to the latest version",
            },
            {
              id: "CVE-2018-13379",
              name: "Fortinet FortiOS Path Traversal",
              description: "A path traversal vulnerability in Fortinet FortiOS",
              severity: "medium",
              cvss: 5.9,
              affected: Math.random() > 0.6,
              remediation: "Update FortiOS to the latest version",
            },
            {
              id: "CVE-2017-0144",
              name: "EternalBlue SMB Vulnerability",
              description: "A vulnerability in Microsoft SMB Server that could allow remote code execution",
              severity: "high",
              cvss: 8.1,
              affected: Math.random() > 0.8,
              remediation: "Install MS17-010 security update",
            },
          ],
        }

        // Filter to only include some vulnerabilities as "affected"
        mockResults.vulnerabilities = mockResults.vulnerabilities.filter((v) => v.affected)

        // Update summary counts based on filtered vulnerabilities
        mockResults.summary.totalVulnerabilities = mockResults.vulnerabilities.length
        mockResults.summary.criticalCount = mockResults.vulnerabilities.filter((v) => v.severity === "critical").length
        mockResults.summary.highCount = mockResults.vulnerabilities.filter((v) => v.severity === "high").length
        mockResults.summary.mediumCount = mockResults.vulnerabilities.filter((v) => v.severity === "medium").length
        mockResults.summary.lowCount = mockResults.vulnerabilities.filter((v) => v.severity === "low").length

        // Calculate score based on vulnerabilities
        const criticalImpact = mockResults.summary.criticalCount * 25
        const highImpact = mockResults.summary.highCount * 15
        const mediumImpact = mockResults.summary.mediumCount * 7
        const lowImpact = mockResults.summary.lowCount * 2

        mockResults.summary.score = Math.max(0, 100 - criticalImpact - highImpact - mediumImpact - lowImpact)

        resolve(mockResults)
      }, 3000)
    })
  }

  const handleScan = async () => {
    if (!target) return

    setScanning(true)
    setScanned(false)

    try {
      const results = await scanForVulnerabilities(target)
      setScanResults(results)
      setScanned(true)
    } catch (error) {
      console.error("Error scanning for vulnerabilities:", error)
    } finally {
      setScanning(false)
    }
  }

  const getSeverityColor = (severity) => {
    switch (severity) {
      case "critical":
        return "bg-red-100 text-red-800 border-red-200"
      case "high":
        return "bg-orange-100 text-orange-800 border-orange-200"
      case "medium":
        return "bg-yellow-100 text-yellow-800 border-yellow-200"
      case "low":
        return "bg-green-100 text-green-800 border-green-200"
      default:
        return "bg-gray-100 text-gray-800 border-gray-200"
    }
  }

  const getSeverityBadge = (severity) => {
    switch (severity) {
      case "critical":
        return <Badge className="bg-red-500">Critical</Badge>
      case "high":
        return <Badge className="bg-orange-500">High</Badge>
      case "medium":
        return <Badge className="bg-yellow-500">Medium</Badge>
      case "low":
        return <Badge className="bg-green-500">Low</Badge>
      default:
        return <Badge>Unknown</Badge>
    }
  }

  const getScoreColor = (score) => {
    if (score < 40) return "text-red-500"
    if (score < 70) return "text-yellow-500"
    return "text-green-500"
  }

  const getScoreText = (score) => {
    if (score < 40) return "High Risk"
    if (score < 70) return "Moderate Risk"
    return "Low Risk"
  }

  const getProgressColor = (score) => {
    if (score < 40) return "bg-red-500"
    if (score < 70) return "bg-yellow-500"
    return "bg-green-500"
  }

  return (
    <div className="p-6">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <div className="flex items-center gap-3 mb-6">
          <Shield className="h-6 w-6 text-cyan-400" />
          <h1 className="text-2xl font-bold text-white">Vulnerability Assessment</h1>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          {vulnerabilities.map((vuln) => (
            <motion.div
              key={vuln.title}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
              className="bg-slate-800/50 rounded-xl p-6"
            >
              <div className="flex items-center justify-between mb-4">
                <vuln.icon className={`h-8 w-8 ${vuln.color}`} />
                <span className="text-sm font-medium text-slate-400">Last 24h</span>
              </div>
              <h3 className="text-2xl font-bold text-white mb-1">{vuln.count}</h3>
              <p className="text-slate-400">{vuln.title}</p>
            </motion.div>
          ))}
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.1 }}
            className="bg-slate-800/50 rounded-xl p-6"
          >
            <h3 className="text-lg font-semibold text-white mb-4">Recent Scans</h3>
            <div className="space-y-4">
              <div className="flex items-center justify-between p-4 bg-slate-700/50 rounded-lg">
                <div className="flex items-center gap-3">
                  <CheckCircle className="h-5 w-5 text-green-400" />
                  <div>
                    <p className="text-white font-medium">Full System Scan</p>
                    <p className="text-sm text-slate-400">Completed 2 hours ago</p>
                  </div>
                </div>
                <span className="text-sm text-slate-400">27 vulnerabilities found</span>
              </div>
              <div className="flex items-center justify-between p-4 bg-slate-700/50 rounded-lg">
                <div className="flex items-center gap-3">
                  <Clock className="h-5 w-5 text-yellow-400" />
                  <div>
                    <p className="text-white font-medium">Network Scan</p>
                    <p className="text-sm text-slate-400">In progress</p>
                  </div>
                </div>
                <span className="text-sm text-slate-400">Scanning...</span>
              </div>
            </div>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
            className="bg-slate-800/50 rounded-xl p-6"
          >
            <h3 className="text-lg font-semibold text-white mb-4">Top Vulnerabilities</h3>
            <div className="space-y-4">
              <div className="p-4 bg-slate-700/50 rounded-lg">
                <div className="flex items-center justify-between mb-2">
                  <h4 className="text-white font-medium">SQL Injection Vulnerability</h4>
                  <span className="text-sm text-red-400">Critical</span>
                </div>
                <p className="text-sm text-slate-400 mb-2">
                  Found in database connection module. Potential for unauthorized data access.
                </p>
                <div className="flex items-center gap-2">
                  <span className="text-xs text-slate-400">Location: /api/database</span>
                  <span className="text-xs text-slate-400">•</span>
                  <span className="text-xs text-slate-400">Discovered: 2 hours ago</span>
                </div>
              </div>
              <div className="p-4 bg-slate-700/50 rounded-lg">
                <div className="flex items-center justify-between mb-2">
                  <h4 className="text-white font-medium">Outdated SSL Certificate</h4>
                  <span className="text-sm text-orange-400">High</span>
                </div>
                <p className="text-sm text-slate-400 mb-2">
                  SSL certificate expired. Requires immediate renewal to maintain secure connections.
                </p>
                <div className="flex items-center gap-2">
                  <span className="text-xs text-slate-400">Location: /ssl/cert</span>
                  <span className="text-xs text-slate-400">•</span>
                  <span className="text-xs text-slate-400">Discovered: 5 hours ago</span>
                </div>
              </div>
            </div>
          </motion.div>
        </div>
      </motion.div>
    </div>
  )
}
