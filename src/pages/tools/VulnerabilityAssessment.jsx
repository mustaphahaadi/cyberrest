"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { Search, Shield, AlertTriangle, CheckCircle } from "lucide-react"

export default function VulnerabilityAssessment() {
  const [target, setTarget] = useState("")
  const [scanning, setScanning] = useState(false)
  const [scanned, setScanned] = useState(false)
  const [scanResults, setScanResults] = useState(null)

  // Mock vulnerability scan function
  const scanForVulnerabilities = (target) => {
    // Simulate API call
    return new Promise((resolve) => {
      setTimeout(() => {
        // Mock scan results
        const mockResults = {
          summary: {
            totalVulnerabilities: Math.floor(Math.random() * 10),
            criticalCount: Math.floor(Math.random() * 3),
            highCount: Math.floor(Math.random() * 4),
            mediumCount: Math.floor(Math.random() * 5),
            lowCount: Math.floor(Math.random() * 6),
            scanTime: Math.floor(Math.random() * 120) + 30,
            score: Math.floor(Math.random() * 100),
          },
          vulnerabilities: [
            {
              id: "CVE-2021-44228",
              name: "Log4j Remote Code Execution",
              description: "A critical vulnerability in the Log4j library that allows remote code execution",
              severity: "critical",
              cvss: 10.0,
              affected: Math.random() > 0.5,
              remediation: "Update Log4j to version 2.15.0 or later",
            },
            {
              id: "CVE-2021-34527",
              name: "PrintNightmare",
              description: "Windows Print Spooler Remote Code Execution Vulnerability",
              severity: "critical",
              cvss: 8.8,
              affected: Math.random() > 0.5,
              remediation: "Install the latest Windows security updates",
            },
            {
              id: "CVE-2021-26855",
              name: "Microsoft Exchange Server Vulnerability",
              description: "Server-side request forgery vulnerability in Exchange Server",
              severity: "high",
              cvss: 8.5,
              affected: Math.random() > 0.6,
              remediation: "Install the latest Exchange security updates",
            },
            {
              id: "CVE-2020-0601",
              name: "Windows CryptoAPI Spoofing Vulnerability",
              description: "A vulnerability in the Windows CryptoAPI that could allow certificate spoofing",
              severity: "high",
              cvss: 7.5,
              affected: Math.random() > 0.7,
              remediation: "Install the latest Windows security updates",
            },
            {
              id: "CVE-2019-19781",
              name: "Citrix ADC Directory Traversal",
              description: "A directory traversal vulnerability in Citrix ADC and Gateway",
              severity: "medium",
              cvss: 6.5,
              affected: Math.random() > 0.5,
              remediation: "Update Citrix ADC and Gateway to the latest version",
            },
            {
              id: "CVE-2018-13379",
              name: "Fortinet FortiOS Path Traversal",
              description: "A path traversal vulnerability in Fortinet FortiOS",
              severity: "medium",
              cvss: 5.9,
              affected: Math.random() > 0.6,
              remediation: "Update FortiOS to the latest version",
            },
            {
              id: "CVE-2017-0144",
              name: "EternalBlue SMB Vulnerability",
              description: "A vulnerability in Microsoft SMB Server that could allow remote code execution",
              severity: "high",
              cvss: 8.1,
              affected: Math.random() > 0.8,
              remediation: "Install MS17-010 security update",
            },
          ],
        }

        // Filter to only include some vulnerabilities as "affected"
        mockResults.vulnerabilities = mockResults.vulnerabilities.filter((v) => v.affected)

        // Update summary counts based on filtered vulnerabilities
        mockResults.summary.totalVulnerabilities = mockResults.vulnerabilities.length
        mockResults.summary.criticalCount = mockResults.vulnerabilities.filter((v) => v.severity === "critical").length
        mockResults.summary.highCount = mockResults.vulnerabilities.filter((v) => v.severity === "high").length
        mockResults.summary.mediumCount = mockResults.vulnerabilities.filter((v) => v.severity === "medium").length
        mockResults.summary.lowCount = mockResults.vulnerabilities.filter((v) => v.severity === "low").length

        // Calculate score based on vulnerabilities
        const criticalImpact = mockResults.summary.criticalCount * 25
        const highImpact = mockResults.summary.highCount * 15
        const mediumImpact = mockResults.summary.mediumCount * 7
        const lowImpact = mockResults.summary.lowCount * 2

        mockResults.summary.score = Math.max(0, 100 - criticalImpact - highImpact - mediumImpact - lowImpact)

        resolve(mockResults)
      }, 3000)
    })
  }

  const handleScan = async () => {
    if (!target) return

    setScanning(true)
    setScanned(false)

    try {
      const results = await scanForVulnerabilities(target)
      setScanResults(results)
      setScanned(true)
    } catch (error) {
      console.error("Error scanning for vulnerabilities:", error)
    } finally {
      setScanning(false)
    }
  }

  const getSeverityColor = (severity) => {
    switch (severity) {
      case "critical":
        return "bg-red-100 text-red-800 border-red-200"
      case "high":
        return "bg-orange-100 text-orange-800 border-orange-200"
      case "medium":
        return "bg-yellow-100 text-yellow-800 border-yellow-200"
      case "low":
        return "bg-green-100 text-green-800 border-green-200"
      default:
        return "bg-gray-100 text-gray-800 border-gray-200"
    }
  }

  const getSeverityBadge = (severity) => {
    switch (severity) {
      case "critical":
        return <Badge className="bg-red-500">Critical</Badge>
      case "high":
        return <Badge className="bg-orange-500">High</Badge>
      case "medium":
        return <Badge className="bg-yellow-500">Medium</Badge>
      case "low":
        return <Badge className="bg-green-500">Low</Badge>
      default:
        return <Badge>Unknown</Badge>
    }
  }

  const getScoreColor = (score) => {
    if (score < 40) return "text-red-500"
    if (score < 70) return "text-yellow-500"
    return "text-green-500"
  }

  const getScoreText = (score) => {
    if (score < 40) return "High Risk"
    if (score < 70) return "Moderate Risk"
    return "Low Risk"
  }

  const getProgressColor = (score) => {
    if (score < 40) return "bg-red-500"
    if (score < 70) return "bg-yellow-500"
    return "bg-green-500"
  }

  return (
    <div className="grid gap-6 md:grid-cols-2">
      <Card>
        <CardHeader>
          <CardTitle>Vulnerability Assessment</CardTitle>
          <CardDescription>Scan for known vulnerabilities and security weaknesses</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Input
              type="text"
              placeholder="Enter target (e.g., domain.com, IP address)"
              value={target}
              onChange={(e) => setTarget(e.target.value)}
            />
            <p className="text-xs text-muted-foreground">Only scan targets you have permission to test</p>
          </div>

          <Button onClick={handleScan} disabled={!target || scanning} className="w-full">
            {scanning ? (
              <>
                <Search className="mr-2 h-4 w-4 animate-pulse" />
                Scanning...
              </>
            ) : (
              <>
                <Search className="mr-2 h-4 w-4" />
                Start Vulnerability Scan
              </>
            )}
          </Button>
        </CardContent>
        <CardFooter className="flex flex-col items-start">
          <Alert>
            <Shield className="h-4 w-4" />
            <AlertDescription>
              This tool checks for common vulnerabilities using non-intrusive methods. Always ensure you have proper
              authorization before scanning any system.
            </AlertDescription>
          </Alert>
        </CardFooter>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Scan Results</CardTitle>
          <CardDescription>
            {scanned ? `Vulnerability assessment for ${target}` : "Start a scan to see vulnerability results"}
          </CardDescription>
        </CardHeader>
        <CardContent>
          {scanning && (
            <div className="flex flex-col items-center justify-center h-40 text-center">
              <div className="rounded-full bg-muted p-3 mb-4">
                <Search className="h-6 w-6 animate-pulse" />
              </div>
              <p className="font-medium">Scanning for vulnerabilities...</p>
              <p className="text-sm text-muted-foreground mt-1">This may take a few minutes</p>
            </div>
          )}

          {scanned && !scanning && scanResults && (
            <Tabs defaultValue="summary">
              <TabsList className="grid w-full grid-cols-2">
                <TabsTrigger value="summary">Summary</TabsTrigger>
                <TabsTrigger value="vulnerabilities">
                  Vulnerabilities
                  {scanResults.summary.totalVulnerabilities > 0 && (
                    <Badge variant="destructive" className="ml-2">
                      {scanResults.summary.totalVulnerabilities}
                    </Badge>
                  )}
                </TabsTrigger>
              </TabsList>

              <TabsContent value="summary" className="space-y-4 pt-4">
                <div className="text-center">
                  <div className="text-3xl font-bold mb-2">
                    <span className={getScoreColor(scanResults.summary.score)}>{scanResults.summary.score}/100</span>
                  </div>
                  <div className={`text-lg font-medium ${getScoreColor(scanResults.summary.score)}`}>
                    {getScoreText(scanResults.summary.score)}
                  </div>
                  <Progress
                    value={scanResults.summary.score}
                    className="h-2 mt-2"
                    indicatorClassName={getProgressColor(scanResults.summary.score)}
                  />
                </div>

                <div className="border rounded-lg p-4">
                  <h3 className="text-sm font-medium mb-3">Vulnerability Summary</h3>
                  <div className="grid grid-cols-2 gap-2">
                    <div className="flex flex-col items-center p-2 rounded-lg bg-red-50">
                      <span className="text-xs text-muted-foreground">Critical</span>
                      <span className="text-2xl font-bold text-red-500">{scanResults.summary.criticalCount}</span>
                    </div>
                    <div className="flex flex-col items-center p-2 rounded-lg bg-orange-50">
                      <span className="text-xs text-muted-foreground">High</span>
                      <span className="text-2xl font-bold text-orange-500">{scanResults.summary.highCount}</span>
                    </div>
                    <div className="flex flex-col items-center p-2 rounded-lg bg-yellow-50">
                      <span className="text-xs text-muted-foreground">Medium</span>
                      <span className="text-2xl font-bold text-yellow-500">{scanResults.summary.mediumCount}</span>
                    </div>
                    <div className="flex flex-col items-center p-2 rounded-lg bg-green-50">
                      <span className="text-xs text-muted-foreground">Low</span>
                      <span className="text-2xl font-bold text-green-500">{scanResults.summary.lowCount}</span>
                    </div>
                  </div>
                </div>

                <div className="border rounded-lg p-4">
                  <h3 className="text-sm font-medium mb-3">Scan Information</h3>
                  <div className="grid grid-cols-2 gap-2 text-sm">
                    <div className="text-muted-foreground">Target:</div>
                    <div>{target}</div>

                    <div className="text-muted-foreground">Scan Time:</div>
                    <div>{scanResults.summary.scanTime} seconds</div>

                    <div className="text-muted-foreground">Total Vulnerabilities:</div>
                    <div>{scanResults.summary.totalVulnerabilities}</div>
                  </div>
                </div>

                {scanResults.summary.totalVulnerabilities > 0 && (
                  <Alert className="bg-red-50 text-red-800 border-red-200">
                    <AlertTriangle className="h-4 w-4" />
                    <AlertDescription>
                      {scanResults.summary.criticalCount > 0
                        ? `Critical vulnerabilities detected! Immediate action recommended.`
                        : `Vulnerabilities found. Review and remediate as soon as possible.`}
                    </AlertDescription>
                  </Alert>
                )}

                {scanResults.summary.totalVulnerabilities === 0 && (
                  <Alert className="bg-green-50 text-green-800 border-green-200">
                    <CheckCircle className="h-4 w-4" />
                    <AlertDescription>No vulnerabilities detected. Your system appears to be secure.</AlertDescription>
                  </Alert>
                )}
              </TabsContent>

              <TabsContent value="vulnerabilities" className="space-y-4 pt-4">
                {scanResults.vulnerabilities.length === 0 ? (
                  <div className="flex flex-col items-center justify-center h-40 text-center">
                    <div className="rounded-full bg-green-100 p-3 mb-4">
                      <CheckCircle className="h-6 w-6 text-green-500" />
                    </div>
                    <p className="font-medium text-green-600">No vulnerabilities found!</p>
                    <p className="text-sm text-muted-foreground mt-1">Your system appears to be secure</p>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {scanResults.vulnerabilities.map((vuln, index) => (
                      <div key={index} className={`border rounded-lg p-4 ${getSeverityColor(vuln.severity)}`}>
                        <div className="flex justify-between items-start mb-2">
                          <div>
                            <h3 className="font-medium">{vuln.name}</h3>
                            <p className="text-xs text-muted-foreground">{vuln.id}</p>
                          </div>
                          <div className="flex items-center gap-2">
                            {getSeverityBadge(vuln.severity)}
                            <span className="text-xs">CVSS: {vuln.cvss}</span>
                          </div>
                        </div>
                        <p className="text-sm mb-3">{vuln.description}</p>
                        <div className="bg-white bg-opacity-50 rounded p-2">
                          <h4 className="text-xs font-medium mb-1">Remediation:</h4>
                          <p className="text-xs">{vuln.remediation}</p>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </TabsContent>
            </Tabs>
          )}

          {!scanning && !scanned && (
            <div className="flex flex-col items-center justify-center h-40 text-center text-muted-foreground">
              <div className="rounded-full bg-muted p-3 mb-4">
                <Search className="h-6 w-6" />
              </div>
              <p>Enter a target and start a scan</p>
              <p className="text-sm mt-1">We'll check for known vulnerabilities and security issues</p>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}
